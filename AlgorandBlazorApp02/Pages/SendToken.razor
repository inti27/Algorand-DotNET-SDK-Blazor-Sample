@page "/SendToken"

<h1>Send Algorand Digital Tokens</h1>
<hr />
<br />
<br />
<div style="width:100%" class=" border-dark">Node Address: <input width="500" class="alert" placeholder=" http://hackathon.algodev.network:9100" @bind="algo_address" /></div>
<div style="width:100%" class=" border-dark">API Token: <input width="500" class="alert" placeholder="ef920e2e7e002953f4b29a8af720efe8e4ecc75ff102b165e0472834b25832c1" @bind="algo_api_token" /></div>
<div class=" border-dark">Source Phrase: <input class="alert" placeholder="Secret Phrase..." @bind="sourcePhrase" /></div>
<div class=" border-dark">Destination Address: <input class="alert" placeholder="Algo address..." @bind="destinationAddress" /></div>
<div class=" border-dark">Asset ID: <input class="alert" placeholder="123456..." @bind="assetId" /></div>
<div class=" border-dark">Amount: <input class="alert" placeholder="Token amount..." @bind="tokenAmount" /></div>
<div class=" border-dark">Memo: <input class="alert" placeholder="Optional memo..." @bind="txMemo" /></div>
<div class="border-dark"><button class="btn-outline-dark" @onclick="SendTokens">Send Token(s)</button></div>
<br />
<hr />
<br />
<div class="alert-danger">@algoStatusMsg</div>
<br />
<div class="alert-info">Transaction Details: <a href="https://testnet.algoexplorer.io/tx/@algoTxSuccess" target="_blank"> @algoTxSuccess</a></div>
<div class="alert-info">Asset Details: <a href="https://testnet.algoexplorer.io/asset/@assetId" target="_blank"> @assetId</a></div>

@code {
    private string sourcePhrase { get; set; }
    private string destinationAddress { get; set; }
    private string tokenAmount { get; set; }
    private int assetId { get; set; } = 0;
    private string txMemo { get; set; }

    private string algoStatusMsg { get; set; }
    private string algoTxSuccess { get; set; }

    static string algo_address { get; set; } = "http://hackathon.algodev.network:9100";
    static string algo_api_token { get; set; } = "ef920e2e7e002953f4b29a8af720efe8e4ecc75ff102b165e0472834b25832c1";

    private void SendTokens()
    {
        try
        {
            Algorand.Algod.Client.Api.AlgodApi algoApiInstance = new Algorand.Algod.Client.Api.AlgodApi(algo_address, algo_api_token);
            //create source account from secrete phrase
            Algorand.Account sourceAccount = null;


            try
            {
                sourceAccount = new Algorand.Account(sourcePhrase);
            }
            catch
            {
                algoStatusMsg = "Error with your Secret Phrase";
                throw;
            }

            //create destination address
            Algorand.Address destAlgoAddress = null;
            try
            {
                destAlgoAddress = new Algorand.Address(destinationAddress);
            }
            catch
            {
                algoStatusMsg = "Error with your Destination Address";
                throw;
            }

            //get the amount to send
            double finalAmount = 0.0;
            try
            {
                finalAmount = double.Parse(tokenAmount);
            }
            catch
            {
                algoStatusMsg = "Error with your Amount";
                throw;
            }

            //get transaction params
            Algorand.Algod.Client.Model.TransactionParams transParams = null;
            try
            {
                transParams = algoApiInstance.TransactionParams();
            }
            catch
            {
                algoStatusMsg = "Error getting the API Transaction Params";
                throw;
            }

            var tx = Algorand.Utils.GetTransferAssetTransaction(sourceAccount.Address, destAlgoAddress, (ulong?)assetId, ulong.Parse(tokenAmount), transParams, null, txMemo);
            // The transaction must be signed by the sender account
            // We are reusing the signedTx variable from the first transaction in the example
            Algorand.SignedTransaction signedTx = sourceAccount.SignTransaction(tx);
            //submit transaction to the chain
            Algorand.Algod.Client.Model.TransactionID id = Algorand.Utils.SubmitTransaction(algoApiInstance, signedTx);
            Algorand.Utils.WaitTransactionToComplete(algoApiInstance, id.TxId);
            algoTxSuccess = id.TxId.ToString();
            algoStatusMsg = "Token has been sent.";
        }
        catch
        {
            algoStatusMsg = "Error sending your token.";
        }
    }

}