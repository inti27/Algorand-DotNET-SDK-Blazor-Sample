@page "/SignToken"

<h1>Use Logic Signature To Sign Token</h1>
<hr />
<br />
<br />
<div style="width:100%" class=" border-dark">Node Address: <input width="500" class="alert" placeholder=" http://hackathon.algodev.network:9100" @bind="algo_address" /></div>
<div style="width:100%" class=" border-dark">API Token: <input width="500" class="alert" placeholder="ef920e2e7e002953f4b29a8af720efe8e4ecc75ff102b165e0472834b25832c1" @bind="algo_api_token" /></div>
<div class=" border-dark">Source Phrase: <input class="alert" placeholder="Secret Phrase..." @bind="sourcePhrase" /></div>
<div class=" border-dark">Asset ID: <input class="alert" placeholder="123456..." @bind="assetID" /></div>
<div class=" border-dark">Program: <input class="alert" placeholder="123456..." @bind="programString" /></div>
<div class=" border-dark">Optional memo: <input class="alert" placeholder="Optional memo..." @bind="txNote" /></div>
<div class="border-dark"><button class="btn-outline-dark" @onclick="SignTokenAddress">Sign Token</button></div>
<br />
<hr />
<br />
<div class="alert-danger">@algoStatusMsg</div>
<br />
<div class="alert-info">Transaction ID: <a href="https://testnet.algoexplorer.io/tx/@algoTxSuccess" target="_blank"> @algoTxSuccess</a></div>
<br />
<div class="alert-info">Asset ID: <a href="https://testnet.algoexplorer.io/asset/@assetID" target="_blank"> @assetID</a></div>


@code {
    private string sourcePhrase { get; set; }
    private ulong? assetID { get; set; } = 0;
    private string txNote { get; set; } = string.Empty;
    private string algoStatusMsg { get; set; }
    private string algoTxSuccess { get; set; }
    static private byte[] programByte { get; set; } = { 0x01, 0x20, 0x01, 0x00, 0x22 };
    private string programString { get; set; }

    static string algo_address { get; set; } = "http://hackathon.algodev.network:9100";
    static string algo_api_token { get; set; } = "ef920e2e7e002953f4b29a8af720efe8e4ecc75ff102b165e0472834b25832c1";

    private void SignTokenAddress()
    {
        try
        {
            Algorand.Algod.Client.Api.AlgodApi algoApiInstance = new Algorand.Algod.Client.Api.AlgodApi(algo_address, algo_api_token);

            //create source account from secrete phrase
            Algorand.Account sourceAccount = null;
            try
            {
                sourceAccount = new Algorand.Account(sourcePhrase);
            }
            catch
            {
                algoStatusMsg = "Error with your Secret Phrase";
                return;
            }
            //create your tx params
            var transParams = algoApiInstance.TransactionParams();

            Algorand.LogicsigSignature lsig = new Algorand.LogicsigSignature(programByte, null);


            //Algorand.LogicsigSignature lsig = new Algorand.LogicsigSignature(Convert.FromBase64String(programString), null);
            algoStatusMsg = "Escrow address: " + lsig.ToAddress().ToString();
            Algorand.Transaction tx = Algorand.Utils.GetLogicSignatureTransaction(lsig, sourceAccount.Address, transParams, txNote);

            //new logic 
            Algorand.SignedTransaction stx = Algorand.Account.SignLogicsigTransaction(lsig, tx);
            Algorand.Algod.Client.Model.TransactionID id = Algorand.Utils.SubmitTransaction(algoApiInstance, stx);
            algoTxSuccess = id.TxId;

            Algorand.Utils.WaitTransactionToComplete(algoApiInstance, id.TxId);
            algoStatusMsg = "Transaction Sent!!" + assetID.ToString();

        }
        catch (Exception e) { algoStatusMsg = "Error: " + e.Message; }
    }
}
