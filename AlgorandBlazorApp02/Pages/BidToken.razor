@page "/BidToken"

<h1>Algo Bid Page </h1>
<hr />
<br />
<br />
<div style="width:100%" class=" border-dark">Node Address: <input width="500" class="alert" placeholder=" http://hackathon.algodev.network:9100" @bind="algo_address" /></div>
<div style="width:100%" class=" border-dark">API Token: <input width="500" class="alert" placeholder="ef920e2e7e002953f4b29a8af720efe8e4ecc75ff102b165e0472834b25832c1" @bind="algo_api_token" /></div>
<div class=" border-dark">Source Phrase: <input class="alert" placeholder="Secret Phrase..." @bind="sourcePhrase" /></div>
<div class=" border-dark">Address to Auction: <input class="alert" placeholder="Algo Address..." @bind="auctionAddress" /></div>
<div class=" border-dark">Bid Currency: <input class="alert" placeholder="Secret Phrase..." @bind="bidCurrency" /></div>
<div class=" border-dark">Max Price: <input class="alert" placeholder="Algo Address..." @bind="maxPrice" /></div>
<div class=" border-dark">Bid ID: <input class="alert" placeholder="Secret Phrase..." @bind="bidID" /></div>
<div class=" border-dark">Auction ID: <input class="alert" placeholder="Algo Address..." @bind="auctionID" /></div>

<div class="border-dark"><button class="btn-outline-dark" @onclick="PlaceBid">Create Token</button></div>
<br />
<hr />
<br />
<div class="alert-danger">@algoStatusMsg</div>
<br />
<div class="alert-info">Transaction ID: <a href="https://testnet.algoexplorer.io/tx/@algoTxSuccess" target="_blank"> @algoTxSuccess</a></div>

@code {
    private string algoStatusMsg { get; set; }
    private string algoTxSuccess { get; set; }
    private string sourcePhrase { get; set; }
    private string auctionAddress { get; set; }
    private ulong? bidCurrency { get; set; } = 1000;
    private ulong? maxPrice { get; set; } = 10;
    private ulong? bidID { get; set; } = 2;
    private ulong? auctionID { get; set; } = 56;

    static string algo_address { get; set; } = "http://hackathon.algodev.network:9100";
    static string algo_api_token { get; set; } = "ef920e2e7e002953f4b29a8af720efe8e4ecc75ff102b165e0472834b25832c1";

    public void PlaceBid()
    {
        Algorand.Algod.Client.Api.AlgodApi algoApiInstance = new Algorand.Algod.Client.Api.AlgodApi(algo_address, algo_api_token);

        //create source account from secrete phrase
        Algorand.Account sourceAccount = null;
        try
        {
            sourceAccount = new Algorand.Account(sourcePhrase);
        }
        catch
        {
            algoStatusMsg = "Error with your Secret Phrase";
            throw;
        }
        //create your tx params
        var transParams = algoApiInstance.TransactionParams();
        // format and send logic sig
        Algorand.Bid bid = new Algorand.Bid(sourceAccount.Address, new Algorand.Address(auctionAddress), bidCurrency, maxPrice, bidID, auctionID);
        var signedBid = sourceAccount.SignBid(bid);
        var tx = Algorand.Utils.GetBidTransaction(sourceAccount.Address, new Algorand.Address(auctionAddress), signedBid, transParams);
        var signedTx = sourceAccount.SignTransaction(tx);
        try
        {
            var id = Algorand.Utils.SubmitTransaction(algoApiInstance, signedTx);
            algoStatusMsg = "Successfully sent tx logic sig tx id: " + id;
        }
        catch
        {
            // This is generally expected, but should give us an informative error message.
            algoStatusMsg = "Exception when calling algod#rawTransaction";
        }
    }
}
